# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-stretch-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: forge
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run:
          name: 'Install PHP extensions'
          command: |
            sudo apt update
            sudo docker-php-ext-install zip
            sudo docker-php-ext-install bcmath
            sudo docker-php-ext-install pdo_mysql
            sudo apt install -y mysql-client

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run: php artisan migrate --force

      # run tests with phpunit
      - run: ./vendor/bin/phpunit
      - run: ./vendor/bin/codacycoverage phpunit
  deploy:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
            fingerprints:
              - "c5:c5:3d:61:1a:7e:7f:18:eb:bf:55:6b:83:2a:a6:96"
      - run:
          name: 'Deploy over ssh'
          command: |
            ssh $SSH_USER@$SSH_HOST "cd ~ && ./deploy.sh"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
